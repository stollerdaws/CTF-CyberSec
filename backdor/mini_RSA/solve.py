import gmpy2

# Given values
e = 3
c=5926440800047066468184992240057621921188346083131741617482777221394411358243130401052973132050605103035491365016082149869814064434831123043357292949645845605278066636109516907741970960547141266810284132826982396956610111589
n=155735289132981544011017189391760271645447983310532929187034314934077442930131653227631280820261488048477635481834924391697025189196282777696908403230429985112108890167443195955327245288626689006734302524489187183667470192109923398146045404320502820234742450852031718895027266342435688387321102862096023537079

# Function to find the e-th root of c
def eth_root(c, e):
    return gmpy2.iroot(c, e)[0]

m_int = eth_root(c, e)
m_int_as_int = int(m_int)  # Convert mpz to int
m_bytes = m_int_as_int.to_bytes(m_int_as_int.bit_length() // 8 + 1, byteorder='big')

# Strip leading null bytes if any
message = m_bytes.lstrip(b'\x00')
print("Decrypted Message:", message.decode())
