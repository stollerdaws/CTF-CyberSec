from sympy import symbols, Eq, solve
from Crypto.Util.number import inverse, long_to_bytes
# n = p*q and extra_information = (p+q) + q
n = 83790217241770949930785127822292134633736157973099853931383028198485119939022553589863171712515159590920355561620948287649289302675837892832944404211978967792836179441682795846147312001618564075776280810972021418434978269714364099297666710830717154344277019791039237445921454207967552782769647647208575607201
c = 55170985485931992412061493588380213138061989158987480264288581679930785576529127257790549531229734149688212171710561151529495719876972293968746590202214939126736042529012383384602168155329599794302309463019364103314820346709676184132071708770466649702573831970710420398772142142828226424536566463017178086577
e = 65537
extra_information = 26565552874478429895594150715835574472819014534271940714512961970223616824812349678207505829777946867252164956116701692701674023296773659395833735044077013
# calculation 1: Solve for p and q
p, q = symbols('p q')
equations = (Eq(p*q, n), Eq(p + 2*q, extra_information))
solution = solve(equations, (p, q))
p, q = solution[0]

p = int(p)
q = int(q)
#calculation 2: d = e^-1 mod (p-1)(q-1)
phi = (p-1)*(q-1)
d = inverse(e, phi)

# calculation 3: m = c ^ d mod n
plain = pow(c, d, n)

print("plain: ", long_to_bytes(plain))